// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/hash.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashServiceClient is the client API for HashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashServiceClient interface {
	HashConcatStream(ctx context.Context, opts ...grpc.CallOption) (HashService_HashConcatStreamClient, error)
}

type hashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashServiceClient(cc grpc.ClientConnInterface) HashServiceClient {
	return &hashServiceClient{cc}
}

func (c *hashServiceClient) HashConcatStream(ctx context.Context, opts ...grpc.CallOption) (HashService_HashConcatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HashService_ServiceDesc.Streams[0], "/proto.HashService/HashConcatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hashServiceHashConcatStreamClient{stream}
	return x, nil
}

type HashService_HashConcatStreamClient interface {
	Send(*HashRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type hashServiceHashConcatStreamClient struct {
	grpc.ClientStream
}

func (x *hashServiceHashConcatStreamClient) Send(m *HashRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hashServiceHashConcatStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HashServiceServer is the server API for HashService service.
// All implementations must embed UnimplementedHashServiceServer
// for forward compatibility
type HashServiceServer interface {
	HashConcatStream(HashService_HashConcatStreamServer) error
	mustEmbedUnimplementedHashServiceServer()
}

// UnimplementedHashServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashServiceServer struct {
}

func (UnimplementedHashServiceServer) HashConcatStream(HashService_HashConcatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HashConcatStream not implemented")
}
func (UnimplementedHashServiceServer) mustEmbedUnimplementedHashServiceServer() {}

// UnsafeHashServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashServiceServer will
// result in compilation errors.
type UnsafeHashServiceServer interface {
	mustEmbedUnimplementedHashServiceServer()
}

func RegisterHashServiceServer(s grpc.ServiceRegistrar, srv HashServiceServer) {
	s.RegisterService(&HashService_ServiceDesc, srv)
}

func _HashService_HashConcatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HashServiceServer).HashConcatStream(&hashServiceHashConcatStreamServer{stream})
}

type HashService_HashConcatStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HashRequest, error)
	grpc.ServerStream
}

type hashServiceHashConcatStreamServer struct {
	grpc.ServerStream
}

func (x *hashServiceHashConcatStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hashServiceHashConcatStreamServer) Recv() (*HashRequest, error) {
	m := new(HashRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HashService_ServiceDesc is the grpc.ServiceDesc for HashService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HashService",
	HandlerType: (*HashServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HashConcatStream",
			Handler:       _HashService_HashConcatStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hash.proto",
}
